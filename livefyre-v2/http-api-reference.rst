HTTP API Reference
******************


Conventions
===========

Livefyre offers a RESTful API, and each method follows a consistent convention. Methods that read data use GET and methods that create or modify data use POST.

Actor Token
-----------

Many calls require user identification. Users are identified within a domain using an Authentication Token. These tokens are passed to the methods using a query-string parameter named ``actor_token`` whose value is the token in Base64 format.  For example, when making a call you might specify a token parameter as such:

.. sourcecode:: plain

    actor_token=bGZ0b2tlbiwyMDExLTA4LTMwVDIx...0l3NHkyeTZkaUdVQU94T3pJdytNQTR5am89

For `Livefyre Blogger`, you can retrieve a token for your logged in session by visiting `http://livefyre.com/auth/token/`_.  Just copy-and-paste the Base64 formatted value shown in your browser, which is ready to use for API calls.  Please note that you must be logged into Livefyre.com to obtain a token this way.

For `Livefyre Publisher`, see the `Publisher Domain Authentication`_ section for instructions on how to create tokens for users within your domain.

API Token
----------

Livefyre's `Comment Search`_ and `Conversation Search`_ APIs require an "API Token" for authorization. API Tokens are generated by submitting a signed Policy Document to the `Create API Token`_ endpoint.

Authorization API Token
=======================

Livefyre API Tokens are mapped to customer-provided API Policy documents that explicitly describe which API endpoints can be accessed by that API Token. This mapping makes it safe for the API Token to be publicly accessible (for example, in a widget embedded on your website), as long as you have constructed a sufficiently secure API Policy.

Create a Policy
---------------
API Policies are used to encode restrictions on requests that use the corresponding API Token. Policies can be used to restrict which endpoints can be accessed, which parameters can be passed to them, HTTP request headers on incoming requests, and to place an expiration date on the API Token.

Each policy is a JSON document with two keys:

- ``expiration``: an ISO8601 datetime indicating when the Policy should expire
- ``policy``: a JSON Object with three parts:

  - ``paths``: a JSON Array of strings indicating which URL paths the token is allowed to access. To limit the token to Comment Search, for example, this value could be ``['/api/v1.1/public/search/comments']``
  - ``headers``: A JSON Array of filters to be applied to HTTP headers of API requests using this token.
  - ``parameters``: A JSON Array of filters to be applied to query-string parameters/values of API requests using this token.

The ``headers`` and ``parameters`` Policy properties use Filters, a JSON microformat for matching string property values. Filters are constructed as follows:

- For an exact value match: ``{"property name": "value"}``
- To match a set of values: ``['matches-any', 'property name', ['value1', 'value2']]``
- To match the beginning of a single value: ``["starts-with", "property name", "value"]``

All together, a policy document looks something like:

.. sourcecode:: javascript

    {
      "expiration": "2011-11-11T00:00:00Z",
      "policy": {
        "headers": [
          {"host": "example.com"}
        ],
        "parameters": [
          ["starts-with", "name", "joh"]
        ],
        "paths": ["/api/v1.1/search", "/api/v1.1/sync"]
      }
    }

Sign the Policy as JWT
----------------------

The next step is to use your Domain Key to sign this policy and convert it to a `JSON Web Token (JWT) <http://self-issued.info/docs/draft-jones-json-web-token.html>`_. JWT libraries exist for many languages, including `Ruby <https://github.com/progrium/ruby-jwt>`_, `Python <http://pypi.python.org/pypi/PyJWT>`_, `PHP <https://github.com/progrium/php-jwt>`_, `Java <http://code.google.com/p/openinfocard/source/browse/trunk/src/org/xmldap/json/WebToken.java>`_, and `.NET <https://github.com/johnsheehan/jwt>`_.

Using Python and the PyJWT library, this step looks like:

.. sourcecode:: python

    import jwt

    DOMAIN_KEY = "Value provided by Livefyre"
    policy = {
        "expiration": "2011-11-11T00:00:00Z",
        "policy": {}
    }

    signed_policy = jwt.encode(policy, DOMAIN_KEY)

Create API Token
----------------

The final step is to exchange the signed Policy JWT for a API Token by requesting the "Create API Token" API endpoint.

.. sourcecode:: bash

    curl -X POST "http://quill.{domain}/api/v1.1/private/management/apitoken/create/" -d "policy={jwt_policy}"

.. sourcecode:: javascript

    {
    "status": "ok",
    "code": 200,
    "data": {
        "apitoken": "284de2a3d5e0kj115193576b1c27c194"
    }
    }

You may use the returned API Token in `Comment Search`_ and `Conversation Search`_ requests. You may even expose this API Token in the raw JavaScript or HTML of your webpages without concern for security, as all requests made using the token will be checked against the corresponding Policy.

Revoke API Token
-----------------

At any time, you may revoke a given API Token to prevent its use.

.. sourcecode:: bash

    curl -X POST http://quill.{domain}/api/v1.1/private/management/apitoken/{apitoken}/revoke

.. sourcecode:: javascript

    {
    "status": "ok",
    "code": 200,
    "data": "{apitoken} has been revoked"
    }

View API Token Policy
---------------------

If you are curious, you may retrieve the original Policy document for a given API Token

.. sourcecode:: bash

    curl -X GET http://quill.{domain}/api/v1.1/private/management/apitoken/{apitoken}/

.. sourcecode:: javascript

    {
    "expiration": "2011-11-11T00:00:00Z",
    "policy": {}
    }

Comment Search
==============

Comments can be retrieved from an entire Domain or from a specific Site, depending on which URL path the request is made to.

.. class:: resource

http://search.{domain}/api/v1.1/public/search/comments/
--------------------------------------------------------

Search comments across all sites in a domain. Allowed methods: GET.

http://search.{domain}/api/v1.1/public/search/site/{site_id}/comments/
----------------------------------------------------------------------

Search comments within the site_id provided in the URI. Allowed methods: GET.

Parameters
..........

.. class:: param-table

+--------------+------------+-------------------------------------------+ 
| Parameter    | Type       | Description                               | 
+==============+============+===========================================+ 
| apitoken     | String     | An `API Token`_ used for authorization    |
+--------------+------------+-------------------------------------------+
| q            | String     | Query substring to search on comment      |
|              |            | fields specified in 'fields' parameter    | 
+--------------+------------+-------------------------------------------+
| fields       | String     | Comma-separated fields on which to perform|
|              |            | a text search. The importance level of    |
|              |            | each field can be adjusted by using the   |
|              |            | boost modifier, which takes the form of   |
|              |            | "field^float" (e.g. "title^1.0,body^1.9") |
|              |            | Fields:                                   |
|              |            |                                           |
|              |            | - article                                 |
|              |            | - title                                   |
|              |            | - body                                    |
|              |            |                                           |
+--------------+------------+-------------------------------------------+
| order        | String     | Specifies how to order the result set.    |
|              |            | Defaults to descending order, but can be  |
|              |            | changed to ascending order by prepending  |
|              |            | '-' to the value (e.g. '-created'). One   |
|              |            | of:                                       |
|              |            |                                           |
|              |            | - relevance: Relevancy of comment to 'q'  |
|              |            |   parameter                               |
|              |            | - created: Comment post date              | 
|              |            | - modified: Comment modification date     |
|              |            | - likes: Number of times the comment has  |
|              |            |   been liked                              |
|              |            | - spam: Number of times commment flagged  |
|              |            |   as as 'Spam'                            |
|              |            | - offtopic: Number of times commment      |
|              |            |   flagged as as 'Off Topic'               |
|              |            | - disagree: Number of times commment      |
|              |            |   flagged as 'Disagree'                   |
|              |            | - profane: Number of times commment       |
|              |            |   flagged as 'Profanity'                  |
+--------------+------------+-------------------------------------------+
| return_fields| String     | Specify fields to return in response to   |
|              |            | minimize bandwidth or include non-default |
|              |            | fields. Possible values:                  |
|              |            |                                           |
|              |            | - default: content, site_id, domain_id,   |
|              |            |   published, updated, author, url,        |
|              |            |   relevance, opines, state, source,       |
|              |            |   conversation, ip_address, in_reply_to,  |
|              |            |   hit_field, nlike                        |
|              |            | - any comma-separated list of fields      |
|              |            |   listed under 'default'                  |
|              |            |                                           |
+--------------+------------+-------------------------------------------+
| max          | Integer    | Number of comments to return in result set|
|              |            | (default 10, max 100)                     | 
+--------------+------------+-------------------------------------------+
| since        |ISO8601 Date| Earliest creation date of result comments | 
+--------------+------------+-------------------------------------------+
| until        |ISO8601 Date| Latest creation date of result comments   | 
+--------------+------------+-------------------------------------------+
| state        | String     | Comma-separated list of moderation states |
|              |            | that result comments can be in. States:   |
|              |            |                                           | 
|              |            | - active: Public, approved comments       |
|              |            | - deleted: Deleted comments               |
|              |            | - unapproved: Comments awaiting approval  |
+--------------+------------+-------------------------------------------+
| source       | String     | Comma-separated list of social comment    |
|              |            | sources chosen from "livefyre", "twitter",|
|              |            | and "facebook"                            |
+--------------+------------+-------------------------------------------+
| user_jid     | String     | Comma-separated list (max 5) of JIDs to   |
|              |            | filter results by author. A user's JID    |
|              |            | is a combination of their user_id and your|
|              |            | custom domain (e.g.                       |
|              |            | "u42\@example.fyre.co")                   |
+--------------+------------+-------------------------------------------+
| site_id      | String     | Comma-separated list (max 5) of Site IDs  |
|              |            | to filter comments by originating site    |
+--------------+------------+-------------------------------------------+
| cursor       | Integer    | Used to page through results.             |
+--------------+------------+-------------------------------------------+

Example
.......

.. sourcecode:: bash

    curl -X GET "http://search.{domain}/api/v1.1/public/search/comments/?apitoken=9ab75ce1f65f5528cec658f86649dc51"

.. sourcecode:: javascript
    
    {
    "status": "ok",
    "code": 200,
    "data": {
        "cursor": {"prev": 0, "next": 1},
        "count": 1,
        "hits": 6063,
        "took": 7,
        "items": [{
            updated: "2010-08-02T09:03:04Z",
            relevancy: 1,
            author: {
                rating: 302,
                jid: "_u221@livefyre.com",
                displayName: "jkretch",
                url: "http://www.livefyre.com/profile/221/",
                imageUrl: "http://livefyre-avatar.s3.amazonaws.com/a/1/ec52354733f6d6b92adbe2ba83aa066c/50.jpg",
                id: 221,
                objectType: "person"
            },
            url: "http://blog.livefyre.com/its-alive-test-out-livefyre-here/#lf_comment=477",
            hit_field: { },
            site_id: 4,
            nlike: 1,
            id: "477",
            content: "<p>Well hello there everyone. Just testing stuff out.</p>",
            conversation: {
                url: "http://blog.livefyre.com/its-alive-test-out-livefyre-here/",
                id: 753,
                title: "Itâs alive! Test out Livefyre here."
            },
            state: "active",
            source: "livefyre",
            published: "2010-07-16T21:22:24Z",
            in_reply_to: null,
            ip_address: null,
            domain_id: 1,
            opines: {
                troll: 0,
                profane: 0,
                spam: 0,
                offensive: 0,
                disagree: 0,
                offtopic: 0,
                likes: 1
            }
        }, ...]
    }
    }

Conversation Search
===================

Conversations can be retrieved from an entire Domain or from a specific Site, depending on which URL path the request is made to.

.. class:: resource

http://search.{domain}/api/v1.1/public/search/convs/
-----------------------------------------------------

Search conversations across all sites in a domain. Allowed methods: GET.

http://search.{domain}/api/v1.1/public/search/site/{site_id}/convs/
--------------------------------------------------------------------

Search conversations within the site_id provided in the URI. Allowed methods: GET.

Parameters
..........

.. class:: param-table

+--------------+------------+-------------------------------------------+ 
| Parameter    | Type       | Description                               | 
+==============+============+===========================================+ 
| apitoken     | String     | An `API Token`_ used for authorization    |
+--------------+------------+-------------------------------------------+
| q            | String     | Query substring to search on conversation |
|              |            | fields specified in 'fields' parameter    | 
+--------------+------------+-------------------------------------------+
| fields       | String     | Comma-separated fields on which to perform|
|              |            | a text search. The importance level of    |
|              |            | each field can be adjusted by using the   |
|              |            | boost modifier, which takes the form of   |
|              |            | "field^float" (e.g. "title^1.0,body^1.9").|
|              |            | Fields:                                   |
|              |            |                                           |
|              |            | - article: The text on the page where the |
|              |            |   conversation is embedded                |
|              |            | - title: The title of the conversation    |
|              |            | - body: The comments left in the          |
|              |            |   conversation                            |
|              |            | - tags: Tags_ applied to the              |
|              |            |   the conversation                        |
|              |            |                                           |
+--------------+------------+-------------------------------------------+
| order        | String     | Specifies how to order the result set.    |
|              |            | Defaults to descending order, but can be  |
|              |            | changed to ascending order by prepending  |
|              |            | '-' to the value (e.g. '-created'). One   |
|              |            | of:                                       |
|              |            |                                           |
|              |            | - relevance: Relevancy of comment to 'q'  |
|              |            |   parameter                               |
|              |            | - created: Conversation create date       | 
|              |            | - updated: Last comment datetime          | 
|              |            | - hotness: Livefyre's proprietary         |
|              |            |   calculation of how active the           |
|              |            |   conversation is. Factors in both recency|
|              |            |   and size of the conversation            |
|              |            | - ncomments: Number of comments in the    |
|              |            |   conversation                            |
+--------------+------------+-------------------------------------------+
| return_fields| String     | Specify fields to return in deafult, to   |
|              |            | minimize bandwidth or include non-default |
|              |            | fields. Possible values:                  |
|              |            |                                           |
|              |            | - default: article_id, site_id, domain_id,|
|              |            |   title, published, updated, author, url, |
|              |            |   ncomment, nuser, annotation             |
|              |            | - all: article_id, site_id, domain_id,    |
|              |            |   title, published, updated, author, url, |
|              |            |   ncomment, nuser, annotation, nlp,       |
|              |            |   hotness, hottest_value, hottest_time,   |
|              |            |   peak, peak_value, peak_time, comments:5,|
|              |            |   users:5, comment_state, hit_field,      |
|              |            |   dispurl, relevancy                      |
|              |            | - any comma-separated list of fields      |
|              |            |   listed under 'all'                      |
|              |            |                                           |
+--------------+------------+-------------------------------------------+
| max          | Integer    | Number of conversations to return in      | 
|              |            | result set (default 10, max 100)          | 
+--------------+------------+-------------------------------------------+
| since        |ISO8601 Date| Earliest creation date of results         | 
+--------------+------------+-------------------------------------------+
| until        |ISO8601 Date| Latest creation date of results           | 
+--------------+------------+-------------------------------------------+
| user_jid     | String     | Comma-separated list (max 5) of JIDs to   |
|              |            | filter results by author. A user's JID    |
|              |            | is a combination of their user_id and your|
|              |            | custom domain (e.g.                       |
|              |            | "u42\@example.fyre.co")                   |
+--------------+------------+-------------------------------------------+
| site_id      | String     | Comma-separated list (max 5) of Site IDs  |
|              |            | to filter convs by originating site       |
+--------------+------------+-------------------------------------------+
| cursor       | Integer    | Used to page through results.             |
+--------------+------------+-------------------------------------------+

Example
.......

.. sourcecode:: bash

    curl -X GET "http://search.{domain}/api/v1.1/public/search/convs/?apitoken=9ab75ce1f65f5528cec658f86649dc51"

.. sourcecode:: javascript
    
    {
    "status": "ok",
    "code": 200,
    "data": {
        "cursor": {"prev": 0, "next": 1},
        "count": 1,
        "hits": 50,
        "took": 51,
        "items": [{
            updated: "2011-10-09T15:08:10Z",
            ncomment: 38,
            title: "New Granularity for Email Notifications",
            url: "http://blog.livefyre.com/new-granularity-for-email-notifications/",
            author: {
                jid: "_u962@livefyre.com",
                displayName: "jennalanger",
                url: "http://www.livefyre.com/profile/962/",
                imageUrl: "http://livefyre-avatar.s3.amazonaws.com/a/1/0d97dd900bdad67bba0159affe2caeb2/50.jpg",
                id: 962,
                objectType: "person"
            },
            site_id: 4,
            annotation: null,
            published: "2011-08-01T18:42:10Z",
            id: "1243566",
            nuser: 19,
            article_id: 0,
            domain_id: 1
        }, ...]
    }
    }


Leaderboard
===========

The 10 "most active" user profiles can be retrieved given a specific Site or a list of sites.

.. class:: resource

http://search.{domain}/api/v1.1/public/leaderboard/
---------------------------------------------------

Parameters
..........

.. class:: param-table

+-------------+------------+-------------------------------------------+ 
| Parameter   | Type       | Description                               | 
+=============+============+===========================================+ 
| apitoken    | String     | An `API Token`_ used for authorization    |
+-------------+------------+-------------------------------------------+
| source_ids  | String     | Comma-separated list of site IDs          |
+-------------+------------+-------------------------------------------+
| since       | ISO8601    | How far back in time should we measure?   |
|             | datetime   | (optional)                                |
|             |            |                                           |
+-------------+------------+-------------------------------------------+
| until       | ISO8601    | Up to what point in time should we        |
|             | datetime   | measure? (optional)                       |
|             |            |                                           |
+-------------+------------+-------------------------------------------+

Example
.......

.. sourcecode:: bash

    curl -X GET "http://search.{domain}/api/v1.1/public/leaderboard/?apitoken=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&source_ids=123456789,987654321"

.. sourcecode:: javascript

    {
        "status": "ok",
        "code": 200,
        "data": {
            source_ids: "123456789,987654321",
            since: "2012-02-02T19:56:30.312417+00:00",
            source_type: "site",
            aggregate: "comments",
            until: null,
            leaderboard: [
                {
                    count: 148,
                    bio: "",
                    jid: "f3fb796e-f256-28b1-be64-84edcd734452@example.fyre.co",
                    last_name: "Miles",
                    user_id: 1234567890,
                    location: "Austin, Texas",
                    display_name: "Guy Miles",
                    first_name: "Guy",
                    profile_url: null,
                    avatar: "http://avatars.example.org/img.jpg"
                },
                /*... up to 9 more records for 10 records total ...*/
            ]
        }
    }


Site Resources
==============

.. class:: resource

http://{domain}/site/{id}/
--------------------------

The site identified by ``id``.

.. class:: method

GET
...

Retrieve site properties.

Query-string parameters:

* ``actor_token``: Base64-encoded token of domain or site owner

Response: 200 OK, with a JSON payload:

.. sourcecode:: javascript

    {
        "url": "{site url}",
        "api_secret": "{base64_secret_key}",
        "id": "{site_id}"
    }

.. class:: resource

http://{domain}/site/{id}/owners/
---------------------------------

The collection of users who are owners of site ``id``.

.. class:: method

GET
...

Retrieve the user list.

Query-string parameters:

* ``actor_token``: Base64-encoded token of domain or site owner

Response: 200 OK, with a JSON payload:

.. sourcecode:: javascript

    [
        "user_0@example.fyre.co",
        "user_1@example.fyre.co",
        ...
    ]

.. class:: method

POST
....

Add a site owner.

Query-string parameters:

* ``actor_token``: Base64-encoded token of domain or site owner

POST data parameters:

* ``jid``: The JID of the user to be added as a site owner

Response: 201 Created, no data.

.. class:: resource

http://{domain}/site/{id}/owner/{jid}
-------------------------------------

The profile identified by a user that is an owner of site ``id``.

.. class:: method

GET
...

Return a link to the profile for this site owner.

Query-string parameters:

* ``actor_token``: Base64-encoded token of domain or site owner

Response: 303 SEE OTHER, with user's profile URL.

.. class:: method

PUT
...

Add the specified ``jid`` as a site owner.

Query-string parameters:

* ``actor_token``: Base64-encoded token of domain or site owner

PUT data: no data.

Response: 200 OK, with no data.

.. class:: method

DELETE
......

Remove the specified ``jid`` as a site owner.

Query-string parameters

* ``actor_token``: Base64-encoded token of domain or site owner

Response: 200 OK, with no data.

.. class:: resource

http://{domain}/site/{id}/admins/
---------------------------------

The collection of users who are admins of site ``id``.

.. class:: method

GET
...

Retrieve the user list.

Query-string parameters:

* ``actor_token``: Base64-encoded token of domain or site owner

Response: 200 OK, with a JSON payload:

.. sourcecode:: javascript

    [
        "user_0@example.fyre.co",
        "user_1@example.fyre.co",
        ...
    ]

.. class:: method

POST
....

Add a site admin.

Query-string parameters:

* ``actor_token``: Base64-encoded token of domain or site owner

POST data parameters:

* ``jid``: The JID of the user to be added as a site admin

Response: 201 Created, no data.

.. class:: resource

http://{domain}/site/{id}/admin/{jid}
-------------------------------------

The profile identified by a user that is an admin of site ``id``.

.. class:: method

GET
...

Return a link to the profile for this site admin.

Query-string parameters:

* ``actor_token``: Base64-encoded token of domain or site owner

Response: 303 SEE OTHER, with user's profile URL.

.. class:: method

PUT
...

Add the specified ``jid`` as a site admin.

Query-string parameters:

* ``actor_token``: Base64-encoded token of domain or site owner

PUT data: no data.

Response: 200 OK, with no data.

.. class:: method

DELETE
......

Remove the specified ``jid`` as a site admin.

Query-string parameters

* ``actor_token``: Base64-encoded token of domain or site owner

Response: 200 OK, with no data.

Domain Resources
================

.. class:: resource

http://{domain}/profiles/
-------------------------

The collection of users that belong to the domain.

.. class:: method

GET
...

Return a list of remote profile objects for all users.  See `Remote Profiles`_ for details.

Query-string parameters:

* ``actor_token``: Base64-encoded token of a domain owner

Response: 200 OK, with a JSON payload:

.. sourcecode:: javascript

    [
        {
            "id": "user_0",
            "display_name": "Alice",
            ...
        },
        {
            "id": "user_1",
            "display_name": "Bob",
            ...
        },
        ...
    ]

.. class:: method

POST
....

Submit a remote profile with the provided information.

Query-string parameters:

* ``actor_token``: Base64-encoded token of a domain owner
* ``id``: The user id of the profile.

POST data: a JSON profile object, containing a profile as described in `Remote Profiles`_.  Use Content-Type: application/json.

Response: 200 OK, with no data.

.. class:: resource

http://{domain}/profile/{id}/
-----------------------------

The profile of the user identified by ``id``.

.. class:: method

GET
...

Return some statistics about the user.

Query-string parameters:

* ``actor_token``: Base64-encoded token of a domain owner

Response: 200 OK, with a JSON payload:

.. sourcecode:: javascript

    {
        "status": "ok",
        "code": "200",
        "data": {
            "user_rating": 5,
            "user_comment_count": 0,
            "user_liked_count": 0,
            "recent_comments": []
        }
    }

.. class:: resource

http://{domain}/sites/
----------------------

The collection of sites that belong to the domain.

.. class:: method

GET
...

Return a list of site objects.

Query-string parameters:

* ``actor_token``: Base64-encoded token of a domain owner

Response: 200 OK, with a JSON payload:

.. sourcecode:: javascript

    [
        {
            "url": "{site url}",
            "api_secret": "{base64_secret_key}",
            "id": "{site_id}"
        },
        {
            "url": "{site url}",
            "api_secret": "{base64_secret_key}",
            "id": "{site_id}"
        },
        ...
    ]

.. class:: method

POST
....

Create a new site.

Query-string parameters:

* ``actor_token``: Base64-encoded token of a domain owner
* ``url``: URL of website to add

POST data: no data.

Response: 200 OK, with a JSON payload:

.. sourcecode:: javascript

    {
        "id": 1,
        "api_secret": "M5X4rTeKsGNRsV2RekagqSIE9UM="
    }

.. class:: resource

.. _Tags:

http://{domain}/api/v1.1/private/management/site/{site_id}/conv/initialize/
---------------------------------------------------------------------------

Initialize or update a conversation, attaching meta data to it.

.. class:: method

POST
....

Create or update (if not exists) the conversation record identified by a combination of site_id and article_identifier.

POST body parameters (application/x-www-form-urlencoded):

* ``source_url``: URL of the original source content for this conversation.  This will be used for links in email notifications.
* ``article_title``: Descriptive title about the article - this will be used in email notifications.
* ``article_identifier``: A string to uniquely identify this piece of content within this site.  Usually from a CMS.
* ``tags``: A comma-separated string of descriptive tags (aka annotations)
* ``sig_created``: A timestamp indicating when the request was signed (Livefyre will verify that it is within a few minutes of receipt of the request.)
* ``sig``: An HMAC-SHA1 calculation of "sig_created={sig_created_value}" using your Site's Key.

Response: 200 OK, with a JSON payload:

.. sourcecode:: javascript

    {
        "result": "created"
    }

.. class:: resource

http://{domain}/owners/
-----------------------

The collection of users who are owners of ``domain``.

.. class:: method

GET
...

Retrieve the user list.

Query-string parameters:

* ``actor_token``: Base64-encoded token of domain owner

Response: 200 OK, with a JSON payload:

.. sourcecode:: javascript

    [
        "user_0@example.fyre.co",
        "user_1@example.fyre.co",
        ...
    ]

.. class:: method

POST
....

Add a domain owner.

Query-string parameters:

* ``actor_token``: Base64-encoded token of domain owner

POST data parameters:

* ``jid``: The JID of the user to be added as a domain owner

Response: 201 Created, no data.

.. class:: resource

http://{domain}/owner/{jid}
---------------------------

The profile identified by a user that is an owner of ``domain``.

.. class:: method

GET
...

Return a link to the profile for this site owner.

Query-string parameters:

* ``actor_token``: Base64-encoded token of domain owner

Response: 303 SEE OTHER, with user's profile URL.

.. class:: method

PUT
...

Add the specified ``jid`` as a domain owner.

Query-string parameters:

* ``actor_token``: Base64-encoded token of domain owner

PUT data: no data.

Response: 200 OK, with no data.

.. class:: method

DELETE
......

Remove the specified ``jid`` as a domain owner.

Query-string parameters

* ``actor_token``: Base64-encoded token of domain owner

Response: 200 OK, with no data.

.. class:: resource

http://{domain}/admins/
-----------------------

The collection of users who are admins of ``domain``.

.. class:: method

GET
...

Retrieve the user list.

Query-string parameters:

* ``actor_token``: Base64-encoded token of domain owner

Response: 200 OK, with a JSON payload:

.. sourcecode:: javascript

    [
        "user_0@example.fyre.co",
        "user_1@example.fyre.co",
        ...
    ]

.. class:: method

POST
....

Add a domain admin.

Query-string parameters:

* ``actor_token``: Base64-encoded token of domain owner

POST data parameters:

* ``jid``: The JID of the user to be added as a domain admin

Response: 201 Created, no data.

.. class:: resource

http://{domain}/admin/{jid}
---------------------------

The profile identified by a user that is an admin of ``domain``.

.. class:: method

GET
...

Return a link to the profile for this domain admin.

Query-string parameters:

* ``actor_token``: Base64-encoded token of domain owner

Response: 303 SEE OTHER, with user's profile URL.

.. class:: method

PUT
...

Add the specified ``jid`` as a domain admin.

Query-string parameters:

* ``actor_token``: Base64-encoded token of domain owner

PUT data: no data.

Response: 200 OK, with no data.

.. class:: method

DELETE
......

Remove the specified ``jid`` as a domain admin.

Query-string parameters

* ``actor_token``: Base64-encoded token of domain owner

Response: 200 OK, with no data.


.. _`http://livefyre.com/auth/token/`: http://livefyre.com/auth/token/
.. _`Remote Profiles`: /docs/advanced-features/#remote-profiles
.. _`Publisher Domain Authentication`: /docs/advanced-features/#publisher-domain-authentication
